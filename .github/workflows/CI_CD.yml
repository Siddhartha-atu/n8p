name: Deploy n8n Workflows

on:
  push:
    branches:
      - main  # This will run the pipeline every time you push to 'main'
  pull_request:
    branches:
      - main  # This will run the pipeline when you open a PR to 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from your repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Build the Docker image for n8n
      - name: Build n8n Docker image
        run: |
          docker build -t n8n-app .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 3: Checkout code again to make sure everything is up to date
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 4: Set up SSH access
      - name: Set up SSH access
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 5: Test SSH connection to EC2 (this will help debug SSH issues)
      - name: Test SSH Connection to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_HOST "echo 'SSH Connection Successful!'"
        env:
          EC2_HOST: 52.215.250.161
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # Step 6: Deploy to your server (n8n Docker container deployment)
      - name: Deploy to EC2 instance (Docker)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_HOST << 'EOF'
            # Update system
            sudo apt update -y && sudo apt upgrade -y

            # Install Docker
            sudo apt install -y docker.io docker-compose

            # Install Certbot for SSL certificate (only if using Let's Encrypt)
            sudo apt install -y certbot python3-certbot-docker

            # Obtain SSL certificate (replace 'example.com' with your domain)
            # If you don't have a domain, you can skip this and use self-signed certs
            sudo certbot certonly --standalone -d example.com

            # Set environment variables for n8n container (replace paths as necessary)
            export N8N_SSL_CERT_PATH="/etc/letsencrypt/live/example.com/fullchain.pem"
            export N8N_SSL_KEY_PATH="/etc/letsencrypt/live/example.com/privkey.pem"
            export N8N_HOST="https://example.com"
            export N8N_PORT=443
            export N8N_PROTOCOL=https
            export N8N_SECURE_COOKIE=true

            # Pull the latest n8n image and start the container
            sudo docker pull n8nio/n8n:latest
            sudo docker run -d \
              --name n8n \
              -p 443:443 \
              -v ~/.n8n:/root/.n8n \
              -e N8N_HOST=$N8N_HOST \
              -e N8N_PORT=$N8N_PORT \
              -e N8N_PROTOCOL=$N8N_PROTOCOL \
              -e N8N_SSL_CERT_PATH=$N8N_SSL_CERT_PATH \
              -e N8N_SSL_KEY_PATH=$N8N_SSL_KEY_PATH \
              -e N8N_SECURE_COOKIE=true \
              n8nio/n8n:latest
          EOF
        env:
          EC2_HOST: 52.215.250.161
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
